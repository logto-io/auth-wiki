---
import { localeDisplay } from "../phrases";
import { getLocaleFromUrl, getLocaleUrl } from "../utils/locale";

type Props = {
  class?: string;
};

const locale = getLocaleFromUrl(Astro.url);
const alternateLinks = Object.fromEntries(
  Object.keys(localeDisplay).map((locale) => [
    locale,
    getLocaleUrl(Astro.url.pathname, locale),
  ]),
);
const selectedWidthCalcId =
  "selected-width-calc-" + Math.random().toString(36).substring(7);
const { class: className, ...rest } = Astro.props;
---

<astro-language-selector
  data-links={JSON.stringify(alternateLinks)}
  data-width-calc-id={selectedWidthCalcId}
>
  <select class={className} {...rest}>
    {
      Object.entries(localeDisplay).map(([value, display]) => (
        <option class="option" value={value} selected={value === locale}>
          {display}
        </option>
      ))
    }
  </select>
</astro-language-selector>
<select
  id={selectedWidthCalcId}
  class={className}
  {...rest}
  style="visibility: hidden; position: absolute; top: -9999px; pointer-events: none; user-select: none;"
>
  <option></option>
</select>

<style>
  .option {
    background-color: var(--color-background);
    color: var(--color-text);
  }
</style>

<script>
  // Astro doesn't provide syntax sugar for passing frontmatter variables to scripts, so a custom
  // element with data attributes is used to pass data from the frontmatter to the script.
  // https://docs.astro.build/en/guides/client-side-scripts/#pass-frontmatter-variables-to-scripts
  class AstroLanguageSelector extends HTMLElement {
    connectedCallback() {
      const select = this.querySelector("select");
      const links = JSON.parse(this.dataset.links ?? "{}");
      const selectedWidthCalcId = this.dataset.widthCalcId;

      // Select tag cannot have dynamic width that fits its content without JavaScript.
      const calcWidth = () => {
        if (!select || !selectedWidthCalcId) return;
        const selected = select.querySelector("option:checked");
        const calc = document.getElementById(selectedWidthCalcId);
        const calcOption = calc?.querySelector("option");
        if (selected && calc && calcOption) {
          calcOption.textContent = selected.textContent;
          select.style.width = `${calc.offsetWidth}px`;
        }
      };

      calcWidth();

      if (select) {
        select.addEventListener("change", () => {
          const locale = select.value;
          const url = links[locale];
          window.location.href = url;
          calcWidth();
        });
      }
    }
  }

  customElements.define("astro-language-selector", AstroLanguageSelector);
</script>
