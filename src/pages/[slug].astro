---
import path from "node:path";
import Layout from "../layouts/Layout.astro";
import Tags from "../components/Tags.astro";
import Topbar from "../components/Topbar.astro";
import Footer from "../components/Footer.astro";
import BackgroundCells from "../components/BackgroundCells.astro";
import FancyHr from "../components/FancyHr.astro";
import Img from "../mdx-components/Img.astro";
import Ref from "../mdx-components/Ref.astro";
import SeeAlso from "../mdx-components/SeeAlso.astro";
import Resources from "../mdx-components/Resources.astro";
import TextLink from "../mdx-components/TextLink.astro";
import Share from "../components/Share.astro";
import { Icon } from "astro-icon/components";
import { getCollection } from "astro:content";
import { getEntry } from "astro:content";
import { defaultLocale } from "astro-i18n-aut";
import { getPhrases } from "../phrases";
import { getLocaleFromUrl } from "../utils/locale";
import { trimEnd } from "../utils/string";

export async function getStaticPaths() {
  // Only the default locale is needed for generating paths. Other locales will be handled by
  // `astro-i18n-aut`.
  const terms = await getCollection("terms", (entry) =>
    entry.slug.startsWith(`${defaultLocale}/`),
  );
  return terms.map(({ slug }) => {
    const [_, ...rest] = slug.split("/");
    return {
      params: { slug: rest.join("/") },
    };
  });
}

const locale = getLocaleFromUrl(Astro.url);
const entry = await getEntry("terms", `${locale}/${Astro.params.slug}`);

if (!entry) {
  if (locale !== defaultLocale) {
    const defaultEntry = await getEntry(
      "terms",
      `${defaultLocale}/${Astro.params.slug}`,
    );
    if (defaultEntry) {
      return Astro.redirect(`/${Astro.params.slug}`);
    }
  }

  return Astro.redirect("/404");
}

const coverUrl = new URL(
  path.join(trimEnd(Astro.url.pathname, ".html"), "cover.png"),
  Astro.url,
).href;
const { title, description, tags } = entry.data;
const { headings, Content } = await entry.render();

if (headings.some(({ depth }) => depth === 1)) {
  throw new Error("The article must not contain a top-level heading.");
}

const phrases = getPhrases(locale);
const seoTitle = phrases.content.what_is.replace("{{title}}", title);
---

<Layout title={seoTitle} description={description} coverUrl={coverUrl}>
  <Topbar />
  <FancyHr />
  <main>
    <article>
      <header>
        <div class="background"></div>
        <div class="metadata">
          <BackgroundCells class="background-cells" />
          <div class="actions">
            <Tags data={tags} />
            <a
              class="button"
              href={`https://github.com/logto-io/auth-wiki/edit/master/src/content/${entry.collection}/${entry.slug}.mdx`}
              target="_blank"
              rel="noopener"
            >
              <Icon name="github" />
              <span>{phrases.content.edit_on_github}</span>
            </a>
          </div>
          <h1>{seoTitle}</h1>
          <p class="description">
            {description}
          </p>
          <Share title={title} shareText={phrases.general.share} />
        </div>
      </header>
      <div class="content">
        <nav class="toc">
          <h2>{phrases.content.table_of_contents}</h2>
          <ul>
            {
              headings
                .filter(({ depth }) => depth < 3)
                .map(({ slug, text }) => (
                  <li>
                    <a href={`#${slug}`}>{text}</a>
                  </li>
                ))
            }
          </ul>
        </nav>
        <div class="main-body">
          <Content
            components={{ a: TextLink, img: Img, Ref, SeeAlso, Resources }}
          />
        </div>
      </div>
    </article>
    <Footer />
  </main>
</Layout>

<style>
  :root {
    --color-background: #fff;
  }
  article {
    position: relative;
  }
  header {
    position: relative;
  }
  header div.background {
    z-index: -1;
    position: absolute;
    background: linear-gradient(180deg, #6225cc 0%, rgb(179, 3, 255) 100%);
    top: -100px;
    bottom: 0;
    left: 0;
    right: 0;
  }
  .background-cells {
    z-index: -1;
    position: absolute;
    right: 12px;
    top: 100px;
  }
  @media (max-width: 810px) {
    .background-cells {
      display: none;
    }
  }
  div.metadata {
    margin: 0 auto;
    max-width: var(--content-max-width);
    padding: 4rem var(--content-padding) 80px;
    position: relative;
    display: flex;
    flex-direction: column;
    gap: 10px;
  }
  div.metadata h1 {
    width: 100%;
    font-size: 36px;
    font-weight: 700;
    line-height: 1.4;
    color: #fff;
  }
  div.metadata p.description {
    margin-block: 0;
    color: rgba(255, 255, 255, 0.85);
    font-size: 18px;
    font-weight: normal;
    line-height: 1.8;
  }
  div.metadata {
    margin: 0 auto;
    text-align: start;
  }
  div.actions {
    display: flex;
    align-items: center;
    justify-content: space-between;
    flex-wrap: wrap;
    column-gap: 32px;
    row-gap: 16px;
  }
  div.actions select.button {
    border: none;
    border-right: 12px solid transparent;
  }
  div.actions .button {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    text-decoration: none;
    border-radius: 8px;
    padding: 6px 10px;
    color: #f7f7f8;
    background-color: rgba(255, 255, 255, 0.16);
    font-size: 14px;
    font-weight: 500;
    line-height: 20px;
    transition: background-color 0.2s ease-in-out;
    text-wrap: nowrap;
  }
  div.actions .button:hover {
    cursor: pointer;
    background-color: rgba(255, 255, 255, 0.2);
  }
  div.actions .button :global(svg) {
    width: 16px;
    height: auto;
  }
  div.content {
    margin: 0 auto;
    max-width: var(--content-max-width);
    padding: 20px var(--content-padding) 0;
    display: flex;
    gap: 48px;
    align-items: flex-start;
    position: relative;
    min-height: 50vh;
  }
  nav.toc {
    margin-block-start: 40px;
    flex: 0 0 240px;
    font-size: 16px;
    line-height: 26px;
    position: sticky;
    top: 32px;
  }
  nav.toc h2 {
    font-size: 14px;
    line-height: 26px;
    font-weight: 700;
    text-transform: uppercase;
  }
  nav.toc ul {
    list-style-type: none;
    margin-block-start: 32px;
    padding-inline-start: 0;
  }
  nav.toc ul li {
    margin-block: 20px;
  }
  nav.toc a {
    color: var(--color-text);
    text-decoration: none;
  }
  nav.toc a:hover {
    text-decoration: underline;
  }
  .main-body {
    flex: 1;
    overflow: hidden;
    font-size: 18px;
    line-height: 1.8;
  }
  .main-body :global(h2),
  .main-body :global(h3),
  .main-body :global(h4),
  .main-body :global(h5) {
    color: var(--color-text);
    line-height: 1.4;
  }
  .main-body :global(h2) {
    margin-block-start: 40px;
    font-size: 24px;
  }
  .main-body :global(h3) {
    margin-block-start: 36px;
    font-size: 20px;
  }
  .main-body :global(h4) {
    margin-block-start: 28px;
    font-size: 18px;
  }
  .main-body :global(h5) {
    margin-block-start: 24px;
    font-size: 16px;
  }
  .main-body :global(ol),
  .main-body :global(ul) {
    margin-block: 10px;
    padding-inline-start: 20px;
  }

  .main-body :global(a) {
    color: var(--color-link);
    text-decoration: none;
  }
  .main-body :global(a:hover) {
    text-decoration: underline;
  }
  .main-body :global(img) {
    max-width: 100%;
  }
  .main-body :global(:not(pre) code) {
    font-size: 85%;
    padding: 0.2em 0.4em;
    background-color: #eff1f1;
    border-radius: 4px;
    border: 1px solid #191c1d1f;
  }
  .main-body :global(pre) {
    padding: 24px;
    margin-block: 1em;
    overflow: auto;
    border-radius: 16px;
    font-size: 14px;
    line-height: 20px;
  }
  .main-body :global(table) {
    font-size: 14px;
    line-height: 20px;
    border-spacing: 0;
    margin-block: 1em;
  }
  .main-body :global(thead),
  .main-body :global(tbody) {
    background-color: rgba(0, 0, 0, 0.01);
  }
  .main-body :global(td) {
    background-color: rgba(0, 0, 0, 0.01);
  }
  .main-body :global(th),
  .main-body :global(td) {
    padding: 10px 12px;
  }
  /* Render table border radius */
  .main-body :global(tr:first-child th:first-child) {
    border-top-left-radius: 8px;
  }
  .main-body :global(tr:first-child th:last-child) {
    border-top-right-radius: 8px;
  }
  .main-body :global(tr:last-child td:first-child) {
    border-bottom-left-radius: 8px;
  }
  .main-body :global(tr:last-child td:last-child) {
    border-bottom-right-radius: 8px;
  }
  /* Render table border for preciesly 1px without overlapping between cells */
  .main-body :global(th),
  .main-body :global(td) {
    border-style: solid;
    border-width: 0 1px 1px 0;
    border-color: rgba(0, 0, 0, 0.08);
  }
  .main-body :global(tr:first-child th) {
    border-top-width: 1px;
  }
  .main-body :global(th:first-child),
  .main-body :global(td:first-child) {
    border-left-width: 1px;
  }
  .main-body :global(blockquote) {
    margin-inline: 0;
    margin-block: 20px;
    padding: 12px 24px 12px 20px;
    font-size: 16px;
    border-left: 4px solid #747778;
    border-radius: 4px;
    background-color: #f7f8f8;
    color: var(--color-text);
  }
  .main-body :global(blockquote p) {
    margin-block: 0;
  }
  .main-body :global(section[data-footnotes]) {
    margin-block-start: 32px;
    padding: 20px 0;
  }
  .main-body :global(hr) {
    margin-block: 24px;
    border: none;
    height: 1px;
    background-color: rgba(0, 0, 0, 0.15);
  }
  .main-body :global(#footnote-label) {
    font-weight: 600;
  }
  @media (max-width: 999px) {
    div.metadata {
      padding-bottom: 40px;
    }
    nav.toc {
      display: none;
    }
  }
  @media (prefers-color-scheme: dark) {
    :root {
      --color-background: #040407;
    }
    header div.background {
      display: none;
    }
    div.metadata p.description {
      color: rgba(255, 255, 255, 0.7);
    }
    div.actions .button {
      color: rgba(255, 255, 255, 0.6);
    }
    div.content {
      color: rgba(255, 255, 255, 0.8);
    }
    nav.toc a {
      color: rgba(255, 255, 255, 0.7);
    }
    .main-body :global(thead),
    .main-body :global(tbody) {
      background-color: rgba(255, 255, 255, 0.1);
    }
    .main-body :global(td) {
      background-color: rgba(255, 255, 255, 0.04);
    }
    .main-body :global(th),
    .main-body :global(td) {
      border-color: rgba(255, 255, 255, 0.1);
    }
    .main-body :global(blockquote) {
      border-left-color: #a9acac;
      background-color: #f7f8f820;
      color: #f7f8f8;
    }
    .main-body :global(hr) {
      background-color: rgba(255, 255, 255, 0.2);
    }
    .main-body :global(:not(pre) code) {
      background-color: #f7f8f829;
      border: 1px solid #f7f8f824;
    }
  }
</style>
